#+title: Audio Declipping
#+author: Pierre-Antoine Comby
#+date:  2020-12-07
#+property: header-args:python :tangle yes :exports results
#+options: toc:nil
#+language: en
#+latex_header: \usepackage{bm}
#+latex_header: \renewcommand{\vec}{\bm}
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport


#+begin_abstract
The inverse problem of audio declipping is ill posed and a regularization prior is thus needed, in particular a sparse synthesis (or in dual space a analysis) are presented and tested. In the following, we implement and extends the methods presented in XX
#+end_abstract


* Initialisation :noexport:
#+name: imports
#+begin_src python
import numpy as np
import scipy.signal as sps
import matplotlib.pyplot as plt
#+end_src
#+name: base_functions
#+begin_src python
def hard_clip(x, th):
    """Perform hard clip of signal."""
    y = x
    y[y > th] = th
    y[y < -th] = -th
    return y


def hard_zero(x, k):
    """Keep the K greatest values of x, set the rest to zero."""
    sort_idx = np.argsort(x)
    x[sort_idx[:-k]] = 0
    return x
#+end_src

* The problem

The saturation of an audio signal occurs often in signal processing and communication, when the original or signal are not available, one requires to reconstruct the parts of the signal which have been lost.
We  consider an original signal \(\vec{x} \in \mathbb{R}^{N}\) which have been clipped to produced \(\vec{y}\).

\[y =
\begin{cases}
x_{i} & \text{ if }  \tau^{-} \le x_{i} \le \tau^{+} \\
\tau^{+} & \text{ if }  \tau^{+} \le x_{i} \\
\tau^{+} & \text{ if }  x_{i} \le \tau^{-}
\end{cases}\]

Our goal is to retrieve \(\hat{\vec{x}}\), which is as close as possible from the original signal  \(\vec{x}\)

** Constrained Optimisation
The indexes of \(\vec{y}\) can be separated into three sets:
- \( \Omega_r = {i \in 1,...,N | y_i = x_i } \)
- \( \Omega_c^+ = {i \in  1,...,N | y_i =  \tau } \)
- \( \Omega_c^- = {i \in 1, ..., N| y_i = -\tau } \)

A correct estimation of \(\vec{x}\)  should thus verify:

- \(\hat{\vec{x}}(\Omega_r) = \vec{y}(\Omega_r) \)
- \(\hat{\vec{x}}(\Omega_c^+) \ge \tau \)
- \(\hat{\vec{x}}(\Omega_c^-) \le -\tau\)
These constraints are denoted as \(\hat{\vec{x}} \in \Gamma(y)\). \(\Gamma(\vec{y})\) is a convex set, and enforcing the previous constraint will be assured by projecting the candidates estimation on \(\Gamma\). Such projection can be implemented as follows:
\[ \proj_{\Gamma(\vec{y})}(\vec{x}) = \max(\min(\vec{x},\gamma_{-}),\gamma_{+}))\]

With:
\[\begin{cases}
\gamma_{+}(\Omega_{r}) &= y(\Omega_{r}) \\
\gamma_{+}(\Omega_{c}^{-}) &= \tau^{-} \\
\gamma_{+}(\Omega_{r}^{+}) &= +\infty \\
\end{cases} \qquad
\begin{cases}
\gamma_{+}(\Omega_{r}) &= y(\Omega_{r}) \\
\gamma_{+}(\Omega_{c}^{-}) &= -\infty \\
\gamma_{+}(\Omega_{r}^{+}) &= \tau^{+} \\
\end{cases}\]

#+begin_src python
class Gamma(object):
    """Defines Gamma(y) the convex set of admissibles signal to declip y."""
    def __init__(self, y):
        tau = np.max(y)
        tauMin = np.min(y)
        self.mLow = y == tauMin
        self.mHigh = y == tau
        self.mRight = not(self.mLow or self.mHigh)
        self.bLow = np.empty_like(y)
        self.bHigh = np.empty_like(y)
        # create the boundary vectors
        self.bLow[self.mRight] = y[self.mRight]
        self.bLow[self.mLow] = tauMin
        self.bLow[self.mHigh] = np.inf
        self.bHigh[self.mRight] = y[self.mRight]
        self.bHigh[self.mLow] = -np.inf
        self.bHigh[self.mHigh] = tau

    def __call__(self, x):
        """
        Perform the projection on the Gamma(y) set.
        """
        return np.maximum(np.minimum(x, self.bLow), self.bHigh)
#+end_src
** Regularization trough Sparsity

The state of the art for the regularization is to use a sparsity (or in dual space, co-sparsity) prior to solve the inverse problem of declipping. Other approach that are also worth mentioning are: linear prediction, minimization of th energy of high order derivative and psycoacoustic.

The sparsity prior rely on a time-frequency analysis, (or synthesis in a dual framework). We consider the Analysis operator \(\vec{A}\) , such that \(\vec{z} =\vec{Ax}\) , with \(\vec{z}\) the sparse representation of $x$ in a dictionnary space (e.g. a Gabor frame).
The /Analysis Problem/ is  therefore:

\begin{equation}
\label{eq:ASPADE}
\arg\min_{x\in \mathbb{R}^{N}} \|z\|_{0} + \text{ s.t. } \|\vec{Ax-z}\|_{2} \le \epsilon \text{ and } x\in \Gamma(\vec{y})
\end{equation}
Or on  the dual side:
\begin{equation}
\label{eq:SSPADE}
\arg\min_{x\in \mathbb{R}^{N}} \|z\|_{0} + \text{ s.t. } \|\vec{x-Dz}\|_{2} \le \epsilon \text{ and } x\in \Gamma(\vec{y})
\end{equation}


* Algorithms

Both  \eqref{eq:ASPADE} and  \eqref{eq:SSPADE} are solvable via an Augmented Lagrangian method
